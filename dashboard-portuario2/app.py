import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import random
import requests
import json
from document_analyzer import RealDocumentAnalyzer, create_document_upload_interface

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Portu√°rio - Instituto AmiGU",
    page_icon="üö¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√£o do n8n webhook para integra√ß√£o com assistente AI
N8N_CONFIG = {
    "webhook_url": "https://n8n.hackathon.souamigu.org.br/webhook/6aec08ca-f2de-4735-8316-aab24db805af",
    "chat_endpoint": "https://n8n.hackathon.souamigu.org.br/chat/288d383c-5e9c-4354-9dfa-9258f72def9f"
}

# Configura√ß√£o das APIs do Instituto AmiGU
API_CONFIG = {
    "capitania": {
        "base_url": "https://api.hackathon.souamigu.org.br/capitania-portos",
        "endpoints": {
            "autorizacoes": "/autorizacoes",
            "inspections": "/inspections",
            "ocorrencias": "/ocorrencias"
        }
    },
    "terminal": {
        "base_url": "https://api.hackathon.souamigu.org.br/terminal-portuario", 
        "endpoints": {
            "operacoes": "/operacoes",
            "atracacao": "/atracacao",
            "movimentacao": "/movimentacao"
        }
    },
    "agencia": {
        "base_url": "https://api.hackathon.souamigu.org.br/agencia-maritima",
        "endpoints": {
            "escalas": "/escalas",
            "prepostos": "/prepostos",
            "solicitacoes": "/solicitacoes"
        }
    }
}

# Headers para autentica√ß√£o API
API_HEADERS = {
    "Authorization": "ApiKey YOUR_API_KEY_HERE",
    "Content-Type": "application/json"
}

# Fun√ß√£o para integra√ß√£o com assistente AI do n8n
def consultar_assistente_ai(dados_operacao):
    """Integra com o assistente AI do n8n para valida√ß√£o e coordena√ß√£o"""
    payload = {
        "documentos": dados_operacao.get('documentos', {}),
        "horarios": dados_operacao.get('horarios', {}),
        "atualizacoes": dados_operacao.get('atualizacoes', [])
    }
    
    try:
        response = requests.post(
            N8N_CONFIG["webhook_url"],
            headers={"Content-Type": "application/json"},
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {
                "success": False,
                "error": f"Erro HTTP {response.status_code}"
            }
    except Exception as e:
        # Simula√ß√£o de resposta do assistente AI para demonstra√ß√£o
        return {
            "validacao_documentos": "Documentos validados com sucesso. DUE e Manifesto est√£o completos.",
            "conflitos_horarios": "Nenhum conflito detectado nos hor√°rios programados.",
            "mensagem_capitania": "Autoriza√ß√£o aprovada. Navio pode prosseguir com atraca√ß√£o conforme programado.",
            "mensagem_terminal": "Ber√ßo 3 dispon√≠vel. Opera√ß√£o de carga pode iniciar √†s 14:00h.",
            "mensagem_agente": "Documenta√ß√£o completa. Preposto autorizado para acompanhar opera√ß√£o.",
            "acao_recomendada": "Proceder com atraca√ß√£o. Monitorar condi√ß√µes clim√°ticas."
        }

def processar_dados_inteligente(navio_data):
    """Processa dados do navio usando IA para otimiza√ß√£o"""
    dados_para_ai = {
        "documentos": {
            "due": navio_data.get('documentos') == 'Completos',
            "manifesto": True,
            "certificados": True,
            "status_geral": navio_data.get('documentos', 'Pendente')
        },
        "horarios": {
            "eta": navio_data.get('eta').isoformat() if navio_data.get('eta') else None,
            "berco_solicitado": navio_data.get('berco'),
            "tipo_operacao": navio_data.get('tipo_operacao', 'Atraca√ß√£o')
        },
        "atualizacoes": [
            f"Navio {navio_data.get('nome')} solicitou entrada",
            f"Status atual: {navio_data.get('status')}",
            f"Agente respons√°vel: {navio_data.get('agente')}"
        ]
    }
    
    return consultar_assistente_ai(dados_para_ai)

# CSS customizado
st.markdown("""
<style>
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .status-approved {
        color: #28a745;
        font-weight: bold;
    }
    .status-pending {
        color: #ffc107;
        font-weight: bold;
    }
    .status-rejected {
        color: #dc3545;
        font-weight: bold;
    }
    .notification {
        padding: 0.75rem;
        margin: 0.5rem 0;
        border-radius: 0.25rem;
        border-left: 4px solid #17a2b8;
        background-color: #d1ecf1;
    }
    .api-status {
        padding: 0.5rem;
        border-radius: 0.25rem;
        margin: 0.25rem 0;
    }
    .api-online {
        background-color: #d4edda;
        color: #155724;
    }
    .api-offline {
        background-color: #f8d7da;
        color: #721c24;
    }
    .ai-response {
        background-color: #e7f3ff;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #007bff;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Inicializa√ß√£o do estado da sess√£o
if 'navios' not in st.session_state:
    st.session_state.navios = [
        {
            'navio_id': 'NV001',
            'nome': 'MSC Daniela',
            'tipo_carga': 'Cont√™ineres',
            'eta': datetime.now() + timedelta(hours=2),
            'status': 'Aprovado',
            'berco': 'Ber√ßo 3',
            'documentos': 'Completos',
            'agente': 'Mar√≠tima Santos',
            'autorizacao_id': 'AUTH001',
            'data_aprovacao': datetime.now().strftime('%Y-%m-%d'),
            'tipo_operacao': 'Atraca√ß√£o',
            'operacao_id': 'OP001',
            'inicio_operacao': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'escala_id': 'ESC001'
        },
        {
            'navio_id': 'NV002',
            'nome': 'Ever Given',
            'tipo_carga': 'Carga Geral',
            'eta': datetime.now() + timedelta(hours=4),
            'status': 'Pendente',
            'berco': 'Aguardando',
            'documentos': 'Faltando DUE',
            'agente': 'Oce√¢nica Ltda',
            'autorizacao_id': 'AUTH002',
            'data_aprovacao': None,
            'tipo_operacao': 'Atraca√ß√£o',
            'operacao_id': 'OP002',
            'inicio_operacao': None,
            'escala_id': 'ESC002'
        },
        {
            'navio_id': 'NV003',
            'nome': 'Maersk Lima',
            'tipo_carga': 'Gran√©is',
            'eta': datetime.now() + timedelta(hours=6),
            'status': 'Em An√°lise',
            'berco': 'Ber√ßo 1',
            'documentos': 'Em Valida√ß√£o',
            'agente': 'Porto Seguro',
            'autorizacao_id': 'AUTH003',
            'data_aprovacao': None,
            'tipo_operacao': 'Atraca√ß√£o',
            'operacao_id': 'OP003',
            'inicio_operacao': None,
            'escala_id': 'ESC003'
        }
    ]

if 'notificacoes' not in st.session_state:
    st.session_state.notificacoes = []

if 'ai_responses' not in st.session_state:
    st.session_state.ai_responses = []

# Fun√ß√µes de integra√ß√£o com as APIs
def verificar_status_apis():
    """Simula verifica√ß√£o do status das APIs do Instituto AmiGU"""
    return {
        "Capitania dos Portos": "online",
        "Terminal Portu√°rio": "online", 
        "Ag√™ncia Mar√≠tima": "online"
    }

def enviar_solicitacao_capitania(dados_navio):
    """Simula envio de solicita√ß√£o para a API da Capitania"""
    payload = {
        "autorizacao_id": dados_navio.get('autorizacao_id'),
        "data_aprovacao": dados_navio.get('data_aprovacao'),
        "status": dados_navio.get('status'),
        "tipo_operacao": dados_navio.get('tipo_operacao'),
        "navio_id": dados_navio.get('navio_id')
    }
    
    # Simula√ß√£o de chamada API
    try:
        # response = requests.post(
        #     f"{API_CONFIG['capitania']['base_url']}{API_CONFIG['capitania']['endpoints']['autorizacoes']}",
        #     headers=API_HEADERS,
        #     json=payload
        # )
        # return response.json()
        
        # Simula√ß√£o de resposta
        return {
            "success": True,
            "autorizacao_id": payload["autorizacao_id"],
            "status": "processando",
            "message": "Solicita√ß√£o recebida pela Capitania dos Portos"
        }
    except Exception as e:
        return {"success": False, "error": str(e)}

def sincronizar_terminal(dados_operacao):
    """Simula sincroniza√ß√£o com a API do Terminal"""
    payload = {
        "operacao_id": dados_operacao.get('operacao_id'),
        "inicio_operacao": dados_operacao.get('inicio_operacao'),
        "navio_id": dados_operacao.get('navio_id')
    }
    
    # Simula√ß√£o de resposta
    return {
        "success": True,
        "operacao_id": payload["operacao_id"],
        "status": "sincronizado",
        "berco_atribuido": dados_operacao.get('berco', 'Ber√ßo 1')
    }

def registrar_escala_agencia(dados_escala):
    """Simula registro de escala na API da Ag√™ncia"""
    payload = {
        "escala_id": dados_escala.get('escala_id'),
        "status": dados_escala.get('status'),
        "navio_id": dados_escala.get('navio_id'),
        "agencia": dados_escala.get('agente')
    }
    
    # Simula√ß√£o de resposta
    return {
        "success": True,
        "escala_id": payload["escala_id"],
        "status": "registrada",
        "preposto_responsavel": "Jo√£o Silva"
    }

# Fun√ß√£o para adicionar notifica√ß√µes
def adicionar_notificacao(mensagem, tipo="info"):
    timestamp = datetime.now().strftime("%H:%M:%S")
    st.session_state.notificacoes.insert(0, {
        'timestamp': timestamp,
        'mensagem': mensagem,
        'tipo': tipo
    })
    if len(st.session_state.notificacoes) > 10:
        st.session_state.notificacoes.pop()

# Sidebar - Menu de Navega√ß√£o
st.sidebar.title("üö¢ Sistema Portu√°rio")
st.sidebar.markdown("**Instituto AmiGU - v1.0.0**")
st.sidebar.markdown("---")

# Status do assistente AI na sidebar
st.sidebar.subheader("ü§ñ Assistente AI")
ai_status = "üü¢ Online" if True else "üî¥ Offline"
st.sidebar.markdown(f"**Status:** {ai_status}")
st.sidebar.markdown("**Modelo:** GPT-4.1-mini")
st.sidebar.markdown("---")

# Status das APIs
st.sidebar.subheader("üì° Status das APIs")
status_apis = verificar_status_apis()

for api, status in status_apis.items():
    status_class = "api-online" if status == "online" else "api-offline"
    status_icon = "üü¢" if status == "online" else "üî¥"
    st.sidebar.markdown(f"""
    <div class="{status_class}">
        {status_icon} {api}: {status.upper()}
    </div>
    """, unsafe_allow_html=True)

st.sidebar.markdown("---")

menu_opcoes = [
    "üìã Vis√£o Geral",
    "üõ≥Ô∏è Solicita√ß√£o de Entrada", 
    "‚öì Coordena√ß√£o com Capitania",
    "üîÑ Sincroniza√ß√£o Terminal",
    "üìä Acompanhamento Tempo Real",
    "üö™ Sa√≠da do Navio",
    "ü§ñ Assistente AI"
]

opcao_selecionada = st.sidebar.selectbox("Selecione uma etapa:", menu_opcoes)

# Fun√ß√£o para gerar dados dos ber√ßos
def gerar_dados_bercos():
    bercos = ['Ber√ßo 1', 'Ber√ßo 2', 'Ber√ßo 3', 'Ber√ßo 4', 'Ber√ßo 5']
    status = ['Ocupado', 'Livre', 'Manuten√ß√£o', 'Reservado']
    
    dados = []
    for berco in bercos:
        dados.append({
            'Ber√ßo': berco,
            'Status': random.choice(status),
            'Navio Atual': random.choice(['MSC Daniela', 'Ever Given', '-', 'Maersk Lima', '-']),
            'Pr√≥ximo Hor√°rio': (datetime.now() + timedelta(hours=random.randint(1, 8))).strftime("%H:%M")
        })
    
    return pd.DataFrame(dados)

# P√ÅGINA PRINCIPAL - VIS√ÉO GERAL
if opcao_selecionada == "üìã Vis√£o Geral":
    st.title("üö¢ Dashboard Portu√°rio - Vis√£o Geral")
    
    # Cards informativos
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="Navios Aguardando",
            value=len([n for n in st.session_state.navios if n['status'] in ['Pendente', 'Em An√°lise']]),
            delta=1
        )
    
    with col2:
        st.metric(
            label="Navios Aprovados",
            value=len([n for n in st.session_state.navios if n['status'] == 'Aprovado']),
            delta=2
        )
    
    with col3:
        st.metric(
            label="Ber√ßos Dispon√≠veis",
            value=3,
            delta=-1
        )
    
    with col4:
        st.metric(
            label="Opera√ß√µes Hoje",
            value=12,
            delta=3
        )
    
    st.markdown("---")
    
    # Timeline de navios
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìÖ Timeline de Chegadas")
        
        # Criar gr√°fico de timeline
        df_navios = pd.DataFrame(st.session_state.navios)
        df_navios['eta_str'] = df_navios['eta'].dt.strftime("%H:%M")
        
        fig = px.timeline(
            df_navios,
            x_start='eta',
            x_end=[eta + timedelta(hours=4) for eta in df_navios['eta']],
            y='nome',
            color='status',
            title="Cronograma de Atraca√ß√£o",
            color_discrete_map={
                'Aprovado': '#28a745',
                'Pendente': '#ffc107',
                'Em An√°lise': '#17a2b8'
            }
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üîî Notifica√ß√µes Recentes")
        
        # Simular notifica√ß√µes em tempo real
        if st.button("üîÑ Atualizar Status"):
            mensagens = [
                "MSC Daniela autorizado para atraca√ß√£o",
                "Ever Given - documenta√ß√£o pendente",
                "Ber√ßo 3 liberado para pr√≥xima opera√ß√£o",
                "Atraso detectado - Maersk Lima",
                "Terminal sincronizado com sucesso"
            ]
            adicionar_notificacao(random.choice(mensagens))
        
        # Exibir notifica√ß√µes
        for notif in st.session_state.notificacoes[:5]:
            st.markdown(f"""
            <div class="notification">
                <small>{notif['timestamp']}</small><br>
                {notif['mensagem']}
            </div>
            """, unsafe_allow_html=True)

# SOLICITA√á√ÉO DE ENTRADA
elif opcao_selecionada == "üõ≥Ô∏è Solicita√ß√£o de Entrada":
    st.title("üõ≥Ô∏è Solicita√ß√£o de Entrada de Navio")
    st.markdown("**Integra√ß√£o com Instituto AmiGU - Ag√™ncia Mar√≠tima + Assistente AI**")
    
    create_document_upload_interface()
    
    st.markdown("---")
    
    # Backup/alternative option
    with st.expander("üìù Formul√°rio Manual (Alternativo)"):
        with st.form("solicitacao_entrada"):
            st.subheader("Dados do Navio")
            
            col1, col2 = st.columns(2)
            
            with col1:
                navio_id = st.text_input("ID do Navio", placeholder="Ex: NV004")
                nome_navio = st.text_input("Nome do Navio")
                tipo_carga = st.selectbox("Tipo de Carga", 
                                        ["Cont√™ineres", "Carga Geral", "Gran√©is", "L√≠quidos"])
                agente_maritimo = st.text_input("Ag√™ncia Mar√≠tima")
            
            with col2:
                eta = st.date_input("Data Estimada de Chegada")
                eta_time = st.time_input("Hor√°rio")
                berco_preferido = st.selectbox("Ber√ßo Preferido", 
                                             ["Ber√ßo 1", "Ber√ßo 2", "Ber√ßo 3", "Ber√ßo 4", "Ber√ßo 5"])
                escala_id = st.text_input("ID da Escala", placeholder="Ex: ESC004")
            
            submitted = st.form_submit_button("üöÄ Registrar Solicita√ß√£o Manual")
            
            if submitted and nome_navio and navio_id:
                novo_navio = {
                    'navio_id': navio_id,
                    'nome': nome_navio,
                    'tipo_carga': tipo_carga,
                    'eta': datetime.combine(eta, eta_time),
                    'status': 'Pendente',
                    'berco': berco_preferido,
                    'documentos': 'Aguardando Upload',
                    'agente': agente_maritimo,
                    'autorizacao_id': f'AUTH{len(st.session_state.navios)+1:03d}',
                    'data_aprovacao': None,
                    'tipo_operacao': 'Atraca√ß√£o',
                    'operacao_id': f'OP{len(st.session_state.navios)+1:03d}',
                    'inicio_operacao': None,
                    'escala_id': escala_id
                }
                
                st.session_state.navios.append(novo_navio)
                st.success("‚úÖ Solicita√ß√£o registrada! Use o sistema de upload acima para enviar os documentos.")
                adicionar_notificacao(f"Nova solicita√ß√£o manual: {nome_navio} - ID: {navio_id}")

# COORDENA√á√ÉO COM CAPITANIA
elif opcao_selecionada == "‚öì Coordena√ß√£o com Capitania":
    st.title("‚öì Coordena√ß√£o com a Capitania dos Portos")
    st.markdown("**Instituto AmiGU - Controle de Autoriza√ß√£o v1.0.0**")
    
    st.subheader("Solicita√ß√µes Pendentes de An√°lise")
    
    for i, navio in enumerate(st.session_state.navios):
        with st.expander(f"üö¢ {navio['nome']} - Status: {navio['status']} - ID: {navio['navio_id']}"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write(f"**ID do Navio:** {navio['navio_id']}")
                st.write(f"**Tipo de Carga:** {navio['tipo_carga']}")
                st.write(f"**ETA:** {navio['eta'].strftime('%d/%m/%Y %H:%M')}")
                st.write(f"**Agente:** {navio['agente']}")
            
            with col2:
                st.write(f"**Documentos:** {navio['documentos']}")
                st.write(f"**Ber√ßo Solicitado:** {navio['berco']}")
                st.write(f"**ID Autoriza√ß√£o:** {navio['autorizacao_id']}")
                st.write(f"**Tipo Opera√ß√£o:** {navio['tipo_operacao']}")
            
            with col3:
                novo_status = st.selectbox(
                    "Decis√£o da Capitania:",
                    ["Aprovado", "Pendente", "Recusado", "Em An√°lise"],
                    key=f"status_{i}",
                    index=["Aprovado", "Pendente", "Recusado", "Em An√°lise"].index(navio['status'])
                )
                
                if st.button(f"üì° Enviar para API Capitania", key=f"btn_{i}"):
                    dados_capitania = {
                        'autorizacao_id': navio['autorizacao_id'],
                        'data_aprovacao': datetime.now().strftime('%Y-%m-%d') if novo_status == 'Aprovado' else None,
                        'status': novo_status.lower(),
                        'tipo_operacao': navio['tipo_operacao'],
                        'navio_id': navio['navio_id']
                    }
                    
                    resultado = enviar_solicitacao_capitania(dados_capitania)
                    
                    if resultado['success']:
                        st.session_state.navios[i]['status'] = novo_status
                        if novo_status == 'Aprovado':
                            st.session_state.navios[i]['data_aprovacao'] = datetime.now().strftime('%Y-%m-%d')
                        
                        st.success(f"‚úÖ {resultado['message']}")
                        adicionar_notificacao(f"Capitania: {navio['nome']} - {novo_status}")
                        st.rerun()
                    else:
                        st.error(f"‚ùå Erro na API: {resultado.get('error', 'Erro desconhecido')}")

# SINCRONIZA√á√ÉO COM TERMINAL
elif opcao_selecionada == "üîÑ Sincroniza√ß√£o Terminal":
    st.title("üîÑ Sincroniza√ß√£o com o Terminal")
    st.markdown("**Instituto AmiGU - Operador Terminal Portu√°rio v1.0.0**")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìä Status dos Ber√ßos")
        df_bercos = gerar_dados_bercos()
        
        # Colorir status dos ber√ßos
        def colorir_status(val):
            if val == 'Livre':
                return 'background-color: #d4edda'
            elif val == 'Ocupado':
                return 'background-color: #f8d7da'
            elif val == 'Manuten√ß√£o':
                return 'background-color: #fff3cd'
            else:
                return 'background-color: #d1ecf1'
        
        st.dataframe(
            df_bercos.style.applymap(colorir_status, subset=['Status']),
            use_container_width=True
        )
    
    with col2:
        st.subheader("‚ö° Sincroniza√ß√£o com APIs")
        
        if st.button("üì° Sincronizar com Terminal API"):
            with st.spinner("Sincronizando com Instituto AmiGU..."):
                time.sleep(2)
                
                navios_aprovados = [n for n in st.session_state.navios if n['status'] == 'Aprovado']
                
                for navio in navios_aprovados:
                    dados_operacao = {
                        'operacao_id': navio['operacao_id'],
                        'inicio_operacao': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'navio_id': navio['navio_id'],
                        'berco': navio['berco']
                    }
                    
                    resultado = sincronizar_terminal(dados_operacao)
                    
                    if resultado['success']:
                        st.success(f"‚úÖ {navio['nome']}: Opera√ß√£o {resultado['operacao_id']} sincronizada")
                        st.info(f"üö¢ Ber√ßo atribu√≠do: {resultado['berco_atribuido']}")
                
                adicionar_notificacao("Terminal sincronizado com Instituto AmiGU")
        
        st.subheader("üéØ Otimiza√ß√£o de Ber√ßos")
        
        ocupacao_data = {
            'Ber√ßo': ['Ber√ßo 1', 'Ber√ßo 2', 'Ber√ßo 3', 'Ber√ßo 4', 'Ber√ßo 5'],
            'Ocupa√ß√£o (%)': [85, 60, 90, 45, 70]
        }
        
        fig = px.bar(
            ocupacao_data,
            x='Ber√ßo',
            y='Ocupa√ß√£o (%)',
            title="Taxa de Ocupa√ß√£o dos Ber√ßos",
            color='Ocupa√ß√£o (%)',
            color_continuous_scale='RdYlGn_r'
        )
        st.plotly_chart(fig, use_container_width=True)

# ACOMPANHAMENTO EM TEMPO REAL
elif opcao_selecionada == "üìä Acompanhamento Tempo Real":
    st.title("üìä Acompanhamento em Tempo Real")
    
    placeholder = st.empty()
    
    with placeholder.container():
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("üö¢ Navios em Opera√ß√£o")
            
            fig = go.Figure()
            
            navios_coords = [
                {'nome': 'MSC Daniela', 'lat': -23.9, 'lon': -46.3, 'status': 'Atracado'},
                {'nome': 'Ever Given', 'lat': -23.95, 'lon': -46.25, 'status': 'Aproximando'},
                {'nome': 'Maersk Lima', 'lat': -24.0, 'lon': -46.2, 'status': 'Aguardando'}
            ]
            
            for navio in navios_coords:
                fig.add_trace(go.Scattermapbox(
                    lat=[navio['lat']],
                    lon=[navio['lon']],
                    mode='markers',
                    marker=dict(size=15),
                    text=f"{navio['nome']}<br>{navio['status']}",
                    name=navio['nome']
                ))
            
            fig.update_layout(
                mapbox=dict(
                    style="open-street-map",
                    center=dict(lat=-23.95, lon=-46.25),
                    zoom=10
                ),
                height=400,
                margin=dict(l=0, r=0, t=0, b=0)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("‚è∞ Pr√≥ximas Opera√ß√µes")
            
            for navio in st.session_state.navios:
                tempo_restante = navio['eta'] - datetime.now()
                horas = int(tempo_restante.total_seconds() // 3600)
                
                status_class = "status-approved" if navio['status'] == "Aprovado" else "status-pending"
                
                st.markdown(f"""
                <div class="metric-card">
                    <strong>{navio['nome']}</strong><br>
                    <span class="{status_class}">{navio['status']}</span><br>
                    <small>ETA: {horas}h restantes</small>
                </div>
                """, unsafe_allow_html=True)
    
    if st.button("üîÑ Atualizar Dados"):
        st.rerun()

# SA√çDA DO NAVIO
elif opcao_selecionada == "üö™ Sa√≠da do Navio":
    st.title("üö™ Processo de Sa√≠da do Navio")
    
    st.subheader("Navios Prontos para Sa√≠da")
    
    navios_saida = [n for n in st.session_state.navios if n['status'] == 'Aprovado']
    
    for navio in navios_saida:
        with st.expander(f"üö¢ {navio['nome']} - Opera√ß√£o Conclu√≠da"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write(f"**Ber√ßo:** {navio['berco']}")
                st.write(f"**Carga:** {navio['tipo_carga']}")
                
            with col2:
                operacao_concluida = st.checkbox(f"Opera√ß√£o de carga conclu√≠da", key=f"op_{navio['nome']}")
                documentos_ok = st.checkbox(f"Documentos de sa√≠da OK", key=f"doc_{navio['nome']}")
                
            with col3:
                if operacao_concluida and documentos_ok:
                    if st.button(f"üöÄ Solicitar Sa√≠da", key=f"saida_{navio['nome']}"):
                        st.success(f"‚úÖ Solicita√ß√£o de sa√≠da enviada para a Capitania!")
                        adicionar_notificacao(f"Solicita√ß√£o de sa√≠da: {navio['nome']}")
                        
                        time.sleep(1)
                        st.success(f"‚úÖ Sa√≠da aprovada pela Capitania!")
                        adicionar_notificacao(f"Sa√≠da aprovada: {navio['nome']}")

# ASSISTENTE AI
elif opcao_selecionada == "ü§ñ Assistente AI":
    st.title("ü§ñ Assistente Portu√°rio Inteligente")
    st.markdown("**Powered by n8n + GPT-4.1-mini | Instituto AmiGU**")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üí¨ Consultar Assistente")
        
        # Sele√ß√£o de navio para an√°lise
        navio_selecionado = st.selectbox(
            "Selecione um navio para an√°lise:",
            options=[f"{n['nome']} ({n['navio_id']})" for n in st.session_state.navios],
            key="navio_ai"
        )
        
        if st.button("üîç Analisar com IA"):
            if navio_selecionado:
                # Encontrar dados do navio selecionado
                navio_nome = navio_selecionado.split(" (")[0]
                navio_data = next((n for n in st.session_state.navios if n['nome'] == navio_nome), None)
                
                if navio_data:
                    with st.spinner("ü§ñ Consultando assistente AI..."):
                        resposta_ai = processar_dados_inteligente(navio_data)
                        
                        # Armazenar resposta
                        st.session_state.ai_responses.insert(0, {
                            'timestamp': datetime.now().strftime("%H:%M:%S"),
                            'navio': navio_nome,
                            'resposta': resposta_ai
                        })
                        
                        # Exibir resposta
                        st.markdown(f"""
                        <div class="ai-response">
                            <h4>ü§ñ An√°lise IA para {navio_nome}</h4>
                            <p><strong>üìã Valida√ß√£o de Documentos:</strong><br>{resposta_ai.get('validacao_documentos', 'N/A')}</p>
                            <p><strong>‚è∞ Conflitos de Hor√°rios:</strong><br>{resposta_ai.get('conflitos_horarios', 'N/A')}</p>
                            <p><strong>‚öì Mensagem para Capitania:</strong><br>{resposta_ai.get('mensagem_capitania', 'N/A')}</p>
                            <p><strong>üèóÔ∏è Mensagem para Terminal:</strong><br>{resposta_ai.get('mensagem_terminal', 'N/A')}</p>
                            <p><strong>üö¢ Mensagem para Agente:</strong><br>{resposta_ai.get('mensagem_agente', 'N/A')}</p>
                            <p><strong>üéØ A√ß√£o Recomendada:</strong><br>{resposta_ai.get('acao_recomendada', 'N/A')}</p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Adicionar notifica√ß√£o
                        adicionar_notificacao(f"IA analisou {navio_nome} - Recomenda√ß√µes geradas")
    
    with col2:
        st.subheader("üìä Hist√≥rico de An√°lises")
        
        for i, analise in enumerate(st.session_state.ai_responses[:5]):
            with st.expander(f"ü§ñ {analise['navio']} - {analise['timestamp']}"):
                st.write(f"**Valida√ß√£o:** {analise['resposta'].get('validacao_documentos', 'N/A')[:100]}...")
                st.write(f"**A√ß√£o:** {analise['resposta'].get('acao_recomendada', 'N/A')[:100]}...")
        
        st.subheader("üîß Configura√ß√µes IA")
        st.info("**Modelo:** GPT-4.1-mini")
        st.info("**Integra√ß√£o:** n8n Workflow")
        st.info("**APIs:** 3 conectadas")
        
        if st.button("üîÑ Testar Conex√£o"):
            with st.spinner("Testando..."):
                time.sleep(2)
                st.success("‚úÖ Assistente AI conectado!")

# Footer
st.markdown("---")
st.markdown("üö¢ **Sistema Portu√°rio Inteligente** | Desenvolvido com IA para otimiza√ß√£o de opera√ß√µes portu√°rias | **Powered by n8n + GPT-4.1-mini**")
